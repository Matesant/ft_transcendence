#!/bin/bash

# Script para testar cookies no ft_transcendence (Debian)
# Autor: GitHub Copilot
# Data: $(date)

set -e

echo "üöÄ Iniciando testador de cookies para ft_transcendence"
echo "=================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "cookie-tester.html" ]; then
    echo "‚ùå Erro: cookie-tester.html n√£o encontrado"
    echo "Certifique-se de estar no diret√≥rio correto"
    exit 1
fi

# Verificar se Python3 est√° instalado
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 n√£o est√° instalado"
    echo "Instale com: sudo apt install python3"
    exit 1
fi

# Verificar se os servi√ßos est√£o rodando
echo "üîç Verificando servi√ßos..."

check_service() {
    local service=$1
    local port=$2
    
    if curl -s -f "http://localhost:$port/" > /dev/null 2>&1; then
        echo "‚úÖ $service (porta $port): OK"
        return 0
    else
        echo "‚ùå $service (porta $port): N√£o est√° rodando"
        return 1
    fi
}

# Verificar cada servi√ßo
services_ok=true
check_service "Auth Service" 3001 || services_ok=false
check_service "Match Service" 3002 || services_ok=false
check_service "User Service" 3003 || services_ok=false

if [ "$services_ok" = false ]; then
    echo ""
    echo "‚ö†Ô∏è Alguns servi√ßos n√£o est√£o rodando!"
    echo "üí° Para iniciar os servi√ßos, execute:"
    echo "   make up    # ou docker-compose up"
    echo ""
    read -p "Continuar mesmo assim? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo ""
echo "üåê Iniciando servidor HTTP para testes..."
echo "üìÇ Arquivo: cookie-tester.html"
echo "üîó URL: http://localhost:8080/cookie-tester.html"
echo ""
echo "üí° Instru√ß√µes:"
echo "   1. O navegador abrir√° automaticamente"
echo "   2. Clique em 'Testar Conectividade' primeiro"
echo "   3. Fa√ßa login com: middleware_test / password123"
echo "   4. Teste as funcionalidades dos servi√ßos"
echo "   5. Use Ctrl+C para parar o servidor"
echo ""

# Verificar se a porta est√° dispon√≠vel
if netstat -tuln 2>/dev/null | grep -q ":8080 "; then
    echo "‚ùå Porta 8080 j√° est√° em uso"
    echo "Pare outros servi√ßos ou mude a porta"
    exit 1
fi

# Fun√ß√£o para abrir navegador
open_browser() {
    sleep 2
    local url="http://localhost:8080/cookie-tester.html"
    
    if command -v xdg-open &> /dev/null; then
        xdg-open "$url" 2>/dev/null &
    elif command -v firefox &> /dev/null; then
        firefox "$url" 2>/dev/null &
    elif command -v chromium &> /dev/null; then
        chromium "$url" 2>/dev/null &
    else
        echo "‚ö†Ô∏è Navegador n√£o detectado. Abra manualmente: $url"
    fi
}

# Abrir navegador em background
open_browser &

# Iniciar servidor Python
echo "üîÑ Servidor iniciando..."
python3 -c "
import http.server
import socketserver
import os

os.chdir('$(pwd)')

class CustomHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.send_header('Access-Control-Allow-Credentials', 'true')
        super().end_headers()

with socketserver.TCPServer(('', 8080), CustomHandler) as httpd:
    print('‚úÖ Servidor rodando em http://localhost:8080')
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print('\nüëã Servidor parado!')
"
