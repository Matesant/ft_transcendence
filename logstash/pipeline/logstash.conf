input {
  gelf {
    port => 12201
    type => "docker"
  }
}

filter {
  # Parse JSON message if it exists
  if [message] {
    json {
      source => "message"
      skip_on_invalid_json => true
    }
  }
  
  # Parse Pino timestamp (convert from milliseconds)
  if [time] {
    date {
      match => [ "time", "UNIX_MS" ]
      target => "@timestamp"
    }
  }
  
  # Parse ISO timestamp if present
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Process container logs
  if [container_name] {
    mutate {
      add_field => { "service_name" => "%{[container_name]}" }
    }
  }
  
  # Extract service name from tag
  if [tag] {
    mutate {
      add_field => { "service_name" => "%{[tag]}" }
    }
  }
  
  # Extract log level from parsed Pino log
  if [level] {
    # Convert numeric levels to text
    if [level] == "30" {
      mutate { add_field => { "log_level" => "info" } }
    } else if [level] == "40" {
      mutate { add_field => { "log_level" => "warn" } }
    } else if [level] == "50" {
      mutate { add_field => { "log_level" => "error" } }
    } else if [level] == "60" {
      mutate { add_field => { "log_level" => "fatal" } }
    } else {
      mutate { add_field => { "log_level" => "%{[level]}" } }
    }
  }
  
  # Add log message field
  if [msg] {
    mutate {
      add_field => { "log_message" => "%{[msg]}" }
    }
  }
  
  # Clean up some fields but keep important ones
  mutate {
    remove_field => [ "command", "created", "image_id", "image_name" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "app-logs-%{+YYYY.MM.dd}"
  }
  
  # Debug output to console (remove in production)
  stdout {
    codec => rubydebug
  }
}
