# ft_transcendence Frontend Development TODO

## ‚úÖ COMPLETED

### 1. UI Components Implementation
- [x] Implement all reusable UI components (pong-card, pong-btn, pong-btn-primary, pong-btn-secondary, pong-btn-danger, pong-input, pong-alert, pong-spinner, neon-glow-*) as per the guideline, using Tailwind CSS and custom CSS utilities where needed.
- [x] Update or create custom CSS utilities in style.css for neon glows, box-shadows, Orbitron font, and spinner animation as required by the components and views.
- [x] Create the Home view (src/views/home/Home.ts) as a class extending AView, following the specified HTML structure, styling, and navigation logic.

### 2. Authentication Views
- [x] Create the Login view (src/views/login/Login.ts) as a class extending AView, with form handling, feedback, and navigation as described.
- [x] Create the Register view (src/views/register/Register.ts) as a class extending AView, with form validation, feedback, and navigation as described.
- [x] Create the TwoFactorAuth view (src/views/TwoFactorAuth.ts) as a class extending AView, with TOTP code input, feedback, and navigation as described.

### 3. Navigation Fix
- [x] Fix navigation to use proper URLs (http://localhost:8080/login, http://localhost:8080/register) instead of hash-based routing.
- [x] Implement navigateTo function using history.pushState for proper SPA navigation.
- [x] Update all views to use navigateTo instead of window.location.hash.

## üîÑ IN PROGRESS

### 4. Main Application Views
- [ ] Create the Dashboard view (src/views/Dashboard.ts) as a class extending AView, with user data loading, logout, quick match, and responsive grid layout as described.
- [ ] Create the Game view (src/views/game/Game.ts) as a class extending AView, implementing the Pong game logic, controls, and responsive canvas as described.

## ‚è≥ PENDING

### 5. Final Integration
- [ ] Ensure all views use the reusable UI components, follow the Pong neon theme, and are fully responsive with correct Tailwind classes and Orbitron font.
- [ ] Test navigation and event handling between all views, ensuring correct routing, state management, and cleanup via dispose methods.

## üéØ NEXT STEPS
1. ‚úÖ Implement Login view with form handling and API integration
2. ‚úÖ Implement Register view with validation
3. ‚úÖ Implement TwoFactorAuth view
4. ‚úÖ Fix navigation to use proper URLs
5. Implement Dashboard view
6. Implement Game view
7. Test all navigation flows
